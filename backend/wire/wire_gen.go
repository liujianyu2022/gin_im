// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"gin_im/config"
	"gin_im/db"
	"gin_im/handler"
	"gin_im/repository"
	"gin_im/router"
	"gin_im/service"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApp(configPath string) (*gin.Engine, error) {
	configConfig := config.LoadConfig(configPath)
	gormDB, err := db.NewMySQLDB(configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(gormDB)
	userService := service.NewUserService(userRepository)
	userHandler := handler.NewUserHandler(userService, configConfig)
	client, err := db.NewRedisClient(configConfig)
	if err != nil {
		return nil, err
	}
	redisRepository := repository.NewRedisRepository(client)
	websocketService := service.NewWebsocketService(redisRepository)
	websocketHandler := handler.NewWebsocketHandler(websocketService, configConfig)
	engine := router.SetupRouter(configConfig, userHandler, websocketHandler)
	return engine, nil
}

// wire.go:

var handlerSet = wire.NewSet(handler.NewUserHandler, handler.NewWebsocketHandler)

var serviceSet = wire.NewSet(service.NewUserService, service.NewWebsocketService)

var repositorySet = wire.NewSet(repository.NewUserRepository, repository.NewRedisRepository)

var dbSet = wire.NewSet(db.NewMySQLDB, db.NewRedisClient)

var routerSet = wire.NewSet(router.SetupRouter)

var configSet = wire.NewSet(config.LoadConfig)

var SuperSet = wire.NewSet(
	handlerSet,
	serviceSet,
	repositorySet,
	dbSet,
	routerSet,
	configSet,
)
